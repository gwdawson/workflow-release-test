name: workflows

on:
  push:
    branches:
      - main

jobs:
  pre-release: # TODO: maybe add tests, dot run release if tests fail?
    name: pre-release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-check.outputs.version }}
      version_changed: ${{ steps.version-check.outputs.changed }}
    steps:
      - name: Fetch codebase
        uses: actions/checkout@v4
      - name: Check version
        id: version-check
        uses: EndBug/version-check@v2
        with:
          diff-search: true

  release:
    name: pre-release / release
    needs: pre-release
    runs-on: ubuntu-latest
    if: needs.pre-release.outputs.version_changed == 'true'
    steps:
      - name: Fetch codebase
        uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Build application
        run: yarn build
      - name: Extract release notes
        run: |
          VERSION=${{ needs.pre-release.outputs.version }}
          sed -n "/## \[v${VERSION}\]/,/## \[v/p" CHANGELOG.md | sed '1d;$d' > release_notes.txt
          if [ ! -s release_notes.txt ]; then
            echo "No release notes available for v$VERSION" > release_notes.txt
          fi

      - name: Archive distribution file
        run: tar -czf dist.tar.gz dist/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ./dist.tar.gz

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.pre-release.outputs.version }}
          release_name: v${{ needs.pre-release.outputs.version }}
          body_path: release_notes.txt

      - name: Upload tar.gz asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.tar.gz
          asset_name: dist.tar.gz
          asset_content_type: application/gzip

  deployment:
    name: pre-release / release / deployment
    needs: [pre-release, release]
    runs-on: ubuntu-latest
    if: needs.pre-release.outputs.version_changed == 'true'
    steps:
      # - name: Download release asset
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     VERSION=${{ needs.pre-release.outputs.version }}
      #     curl -L -H "Authorization: token $GITHUB_TOKEN" \
      #       "$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
      #       https://api.github.com/repos/${{ github.repository }}/releases/tags/v${VERSION} | \
      #       jq -r '.assets[] | select(.name == "dist.tar.gz") | .url')" \
      #       -o dist.tar.gz

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact

      - name: Display structure of downloaded files
        run: ls -R

      # - name: Set up SSH agent
      #   uses: webfactory/ssh-agent@v0.9.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Copy release code to VPS
      #   run: |
      #     rsync -avz --delete \
      #     -e "ssh -o StrictHostKeyChecking=no" \
      #     dist.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/dist.tar.gz

      #     ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
      #       if [ -f /tmp/dist.tar.gz ]; then
      #         echo "File transferred successfully. Extracting..."
      #         mkdir -p /testing
      #         tar -xzf /tmp/dist.tar.gz -C /testing || { echo "Extraction failed. Exiting."; exit 1; }
      #         rm /tmp/dist.tar.gz
      #       else
      #         echo "File not found on server. Exiting."
      #         exit 1
      #       fi
      #     EOF

      # ---------

      # - name: Checkout the release tag
      #   uses: actions/checkout@v4
      #   with:
      #     ref: v${{ needs.pre-release.outputs.version }}

      # - name: Set up SSH agent
      #   uses: webfactory/ssh-agent@v0.9.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Copy release code to VPS
      #   run: |
      #     rsync -avz --delete \
      #     -e "ssh -o StrictHostKeyChecking=no" \
      #     ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/testing

      # - name: Restart Nginx on VPS
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
      #     "sudo systemctl restart nginx"
